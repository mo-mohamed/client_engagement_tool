// Code generated by MockGen. DO NOT EDIT.
// Source: queue/client_interface.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	queue "customer_engagement/queue"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIQueueClient is a mock of IQueueClient interface.
type MockIQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockIQueueClientMockRecorder
}

// MockIQueueClientMockRecorder is the mock recorder for MockIQueueClient.
type MockIQueueClientMockRecorder struct {
	mock *MockIQueueClient
}

// NewMockIQueueClient creates a new mock instance.
func NewMockIQueueClient(ctrl *gomock.Controller) *MockIQueueClient {
	mock := &MockIQueueClient{ctrl: ctrl}
	mock.recorder = &MockIQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueueClient) EXPECT() *MockIQueueClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIQueueClient) Delete(queueUrl, rcId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", queueUrl, rcId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIQueueClientMockRecorder) Delete(queueUrl, rcId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIQueueClient)(nil).Delete), queueUrl, rcId)
}

// Receieve mocks base method.
func (m *MockIQueueClient) Receieve(queueUrl string) (*queue.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receieve", queueUrl)
	ret0, _ := ret[0].(*queue.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receieve indicates an expected call of Receieve.
func (mr *MockIQueueClientMockRecorder) Receieve(queueUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receieve", reflect.TypeOf((*MockIQueueClient)(nil).Receieve), queueUrl)
}

// Send mocks base method.
func (m *MockIQueueClient) Send(req *queue.SendRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockIQueueClientMockRecorder) Send(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIQueueClient)(nil).Send), req)
}
